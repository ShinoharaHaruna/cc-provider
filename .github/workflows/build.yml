name: Build and Release

on:
  push:
    branches:
      - main
      - master
    tags:
      - "v*"
  pull_request:
    branches:
      - main
      - master

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整的 git 历史以便正确生成版本号 / Fetch full git history for correct version generation

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Build binary
        run: make build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cc-provider-linux-amd64
          path: bin/cc-provider

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    permissions:
      contents: write # 需要写权限来创建 release / Need write permission to create release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: cc-provider-linux-amd64
          path: ./release

      - name: Make binary executable
        run: chmod +x ./release/cc-provider

      - name: Create release archive
        run: |
          cd release
          tar -czf cc-provider-linux-amd64.tar.gz cc-provider
          sha256sum cc-provider-linux-amd64.tar.gz > cc-provider-linux-amd64.tar.gz.sha256

      - name: Extract release notes
        id: extract_notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # 提取 tag 注释作为 release notes / Extract tag annotation as release notes
          git tag -l --format='%(contents)' $VERSION > release_notes.txt

          # 如果 tag 注释为空,使用默认消息 / If tag annotation is empty, use default message
          if [ ! -s release_notes.txt ]; then
            echo "Release $VERSION" > release_notes.txt
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.extract_notes.outputs.version }}
          body_path: release_notes.txt
          files: |
            release/cc-provider-linux-amd64.tar.gz
            release/cc-provider-linux-amd64.tar.gz.sha256
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
